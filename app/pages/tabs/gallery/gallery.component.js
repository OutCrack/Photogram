"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var imagepicker = require("nativescript-imagepicker");
var bghttp = require("nativescript-background-http");
var session = bghttp.session("image-upload");
var http = require("http");
var Data_1 = require("../../../shared/Data");
var Photo_1 = require("../../../shared/Photo");
var Server_1 = require("../../../shared/Server/Server");
var router_1 = require("@angular/router");
var GalleryComponent = /** @class */ (function () {
    function GalleryComponent(router, _changeDetectionRef, data) {
        this.router = router;
        this._changeDetectionRef = _changeDetectionRef;
        this.data = data;
        this.items = [];
        this.site = "http://188.166.127.207:5555/api.php/";
        this.stackLoaded = function (args) {
            console.log("Stack Loaded");
            this.myAlbums = this.server.getAlbums(this.data.storage["id"]);
        };
        //this.getPhotos();
        this.selected = false;
        console.log("In gallery constructor");
        this.server = new Server_1.Server();
        this.mEvents = false;
        this.photos = false;
        this.eventSelected = false;
        this.participants = [];
    }
    GalleryComponent.prototype.selectAlbum = function (albumId) {
        console.log("You tapped " + albumId);
        this.router.navigate(["/albumView", albumId]);
    };
    GalleryComponent.prototype.getPhotos = function () {
        var _this = this;
        if (this.photos) {
            this.photos = false;
        }
        else {
            this.photos = true;
            this.id = this.data.storage["id"];
            this.myPhotos = new Array();
            var query = this.site + "files?transform=1&filter=user_Id,eq," + this.id + "&order=created_at,desc";
            http.getJSON(query)
                .then(function (r) {
                //testing
                console.log("Files length is " + r.files.length);
                for (var i = 0; i < r.files.length; i++) {
                    _this.myPhotos.push(new Photo_1.Photo(r.files[i].file_Id, "users/" + _this.id + "/" + r.files[i].file_URL, //need to adjust when photo is in event catalog
                    _this.id, r.files[i].created_at, r.files[i].file_Description, r.files[i].album_Id, r.files[i].file_Name));
                    console.log("There are " + _this.myPhotos.length + " photos in my photos");
                }
            }, function (e) {
                console.log(e);
            }).then(function () {
                //testing
                console.log("There are " + _this.myPhotos.length + " photos in my photos");
            });
        }
    };
    GalleryComponent.prototype.removePhoto = function (photoId, fileName) {
        var _this = this;
        console.log(photoId);
        console.log(fileName);
        this.server.removePhoto(photoId).then(function () {
            _this.server.deletePhoto(_this.data.storage["id"], fileName, "photo", photoId);
            _this.photos = false;
            _this.getPhotos();
        }).catch(function () {
            alert("Error deleting photo. Please try again later");
        });
    };
    GalleryComponent.prototype.selectPhoto = function (args) {
        this.selected = true;
        console.log("The id is " + args.view.id);
        console.log("The event name is " + args.eventName);
        this.selectedId = parseInt(args.view.id);
        this.getPhoto(this.selectedId);
    };
    GalleryComponent.prototype.getPhoto = function (id) {
        var _this = this;
        this.selectedPhoto = this.myPhotos.find(function (i) { return i.id === id; });
        this.username = this.selectedPhoto.user.firstN + " " + this.selectedPhoto.user.lastN;
        this.photoId = this.selectedPhoto.id;
        this.photoUrl = this.selectedPhoto.url;
        this.photoCreated = this.selectedPhoto.created;
        this.photoDescription = this.selectedPhoto.description;
        this.photoComments = this.selectedPhoto.comments;
        this.server.getLikes(this.photoId, this.data.storage["id"]).then(function (result) {
            _this.selectedPhoto.likes = _this.selectedPhoto.likes = parseInt(JSON.stringify(result));
        }).catch(function (reject) {
            _this.selectedPhoto.likes = _this.selectedPhoto.likes = parseInt(JSON.stringify(reject));
        });
    };
    GalleryComponent.prototype.closePhoto = function () {
        this.selected = false;
        this.selectedPhoto = null;
        this.photoUrl = "";
        this.photoCreated = "";
        this.selectedId = 0;
    };
    /*addComment(result) {
        console.log("Comment " + result.text);
        if (result.text.length < 1) {
            alert("Cannot insert empty comment");
        } else {
            var commentId = this.server.updateComment(this.photoId, this.data.storage["id"], result.text);
            //var comment = new Comment(commentId, this.data.storage["id"], result.text);
            //comment.rights = true;
            //this.photoComments.push(comment);
            this.getPhoto(this.selectedId);
            this.selectedPhoto.getComments().then(() => {
                this.photoComments = this.selectedPhoto.comments;
            }); }
        result.text = "";
    }*/
    GalleryComponent.prototype.removeComment = function (commentId) {
        var _this = this;
        console.log("You click comment id " + commentId);
        var promise = new Promise(function (resolve, reject) {
            _this.server.removeComment(commentId);
            _this.getPhoto(_this.selectedId);
            resolve();
        });
        promise.then(function () {
            _this.selectedPhoto.getComments().then(function () {
                _this.photoComments = _this.selectedPhoto.comments;
            });
        });
    };
    GalleryComponent.prototype.getEvents = function () {
        this.mEvents = !this.mEvents;
        if (this.mEvents) {
            this.participEvents = this.server.getMyEvents(this.data.storage["id"]);
            console.log("Events " + this.participEvents.length);
        }
    };
    GalleryComponent.prototype.newEvent = function () {
        console.log("New Event tapped");
        //this.router.navigate(["/e svent"]);
    };
    GalleryComponent.prototype.openGallery = function () {
        this.id = this.data.storage["id"];
        console.log(this.getTimeStamp());
        console.log("Id " + this.id);
        var context = imagepicker.create({
            mode: "single" //"multiple"
        });
        this.startSelecting(context);
    };
    GalleryComponent.prototype.startSelecting = function (context) {
        var _that = this;
        console.log("in Gallery constructor");
        context
            .authorize()
            .then(function () {
            _that.items = [];
            return context.present();
        })
            .then(function (selection) {
            selection.forEach(function (selected) {
                console.log("----------------");
                console.log("uri: " + selected.uri);
                console.log("fileUri: " + selected.fileUri);
                _that.uploadPhoto(selected.fileUri);
            });
            _that.items = selection;
            _that._changeDetectionRef.detectChanges();
        }).catch(function (e) {
            console.log(e);
        });
    };
    GalleryComponent.prototype.uploadPhoto = function (fileUrl) {
        var fileName = this.getTimeStamp();
        var that = this;
        var request = {
            url: "http://188.166.127.207:8888/Server.js",
            method: "POST",
            headers: {
                "Content-Type": "application/octet-stream",
                "Path": "users/",
                "File-Name": fileName,
                "User-id": this.id
            },
            description: "{ 'uploading': fileUrl }"
        };
        var task = session.uploadFile(fileUrl, request);
        task.on("progress", logEvent);
        task.on("error", logEvent);
        //only when uploading is complete, update the database
        task.on("complete", logEvent);
        function logEvent(e) {
            if (e.eventName == "complete") {
                that.updateDb(fileName);
                alert("Upload complete");
            }
            console.log(e.eventName);
        }
    };
    GalleryComponent.prototype.updateDb = function (fileName) {
        var result;
        var name = "img" + fileName + ".jpg";
        console.log("The id " + this.id);
        http.request({
            url: "http://188.166.127.207:5555/api.php/files/",
            method: "POST",
            headers: { "Content-Type": "application/json" },
            //put file url instead of just name
            content: JSON.stringify({ user_Id: this.id, file_Name: name, file_URL: name,
                file_Permission: "Public" })
        }).then(function (response) {
            result = response.content.toJSON();
            console.log(result);
        }, function (e) {
            console.log("Error occured " + e);
        });
    };
    GalleryComponent.prototype.getTimeStamp = function () {
        var date = new Date();
        var string = date.getFullYear().toString() + date.getMonth().toString() + date.getDate().toString()
            + date.getHours().toString() + date.getMinutes().toString() +
            +date.getSeconds().toString() + date.getMilliseconds().toString();
        return string;
    };
    GalleryComponent.prototype.selectEvent = function (args) {
        var eventId = parseInt(args.view.id);
        this.participants = this.server.getEventParticipants(eventId);
        console.log("Event id " + eventId);
        console.log("Participants " + this.participants.length);
        this.eventSelected = !this.eventSelected;
    };
    GalleryComponent.prototype.leaveEvent = function (eventId) {
        console.log("Evnet id tapped " + eventId + " user id " + this.data.storage["id"]);
        this.server.leaveEvent(eventId, this.data.storage["id"]);
        alert("Event removed");
        this.mEvents = false;
        this.getEvents();
    };
    GalleryComponent = __decorate([
        core_1.Component({
            selector: "gallery-tab",
            templateUrl: "./pages/tabs/gallery/gallery.tab.html",
            styleUrls: ["./pages/tabs/gallery/gallery.tab.css"]
        }),
        __metadata("design:paramtypes", [router_1.Router, core_1.ChangeDetectorRef, Data_1.Data])
    ], GalleryComponent);
    return GalleryComponent;
}());
exports.GalleryComponent = GalleryComponent;
//# sourceMappingURL=data:application/json;base64,