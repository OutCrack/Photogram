"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var imagepicker = require("nativescript-imagepicker");
var bghttp = require("nativescript-background-http");
var session = bghttp.session("image-upload");
var http = require("http");
var Data_1 = require("../../../shared/Data");
var GalleryComponent = /** @class */ (function () {
    function GalleryComponent(_changeDetectionRef, data) {
        this._changeDetectionRef = _changeDetectionRef;
        this.data = data;
        this.items = [];
    }
    GalleryComponent.prototype.openGallery = function () {
        this.id = this.data.storage["id"];
        console.log(this.getTimeStamp());
        console.log("Id" + this.id);
        var context = imagepicker.create({
            mode: "single" //"multiple"
        });
        this.startSelecting(context);
    };
    GalleryComponent.prototype.startSelecting = function (context) {
        var _that = this;
        console.log("in Gallery constructor");
        context
            .authorize()
            .then(function () {
            _that.items = [];
            return context.present();
        })
            .then(function (selection) {
            selection.forEach(function (selected) {
                console.log("----------------");
                console.log("uri: " + selected.uri);
                console.log("fileUri: " + selected.fileUri);
                _that.uploadPhoto(selected.fileUri);
            });
            _that.items = selection;
            _that._changeDetectionRef.detectChanges();
        }).catch(function (e) {
            console.log(e);
        });
    };
    GalleryComponent.prototype.uploadPhoto = function (fileUrl) {
        var fileName = this.getTimeStamp();
        var request = {
            url: "http://188.166.127.207:8888/Server.js",
            method: "POST",
            headers: {
                "Content-Type": "application/octet-stream",
                "File-Name": fileName
            },
            description: "{ 'uploading': fileUrl }"
        };
        var task = session.uploadFile(fileUrl, request);
        task.on("progress", logEvent);
        task.on("error", logEvent);
        //only when uploading is complete, update the database
        task.on("complete", this.updateDb(fileName));
        task.on("complete", alert("Uploading complete"));
        function logEvent(e) {
            console.log(e.eventName);
        }
    };
    GalleryComponent.prototype.updateDb = function (fileName) {
        var result;
        var name = "img" + fileName + ".jpg";
        http.request({
            url: "http://188.166.127.207:5555/api.php/files",
            method: "POST",
            headers: { "Content-Type": "application/json" },
            content: JSON.stringify({ user_Id: this.id, file_Name: name, file_URL: name,
                file_Permission: "Public" })
        }).then(function (response) {
            result = response.content.toJSON();
            console.log(result);
        }, function (e) {
            console.log("Error occured " + e);
        });
    };
    GalleryComponent.prototype.getTimeStamp = function () {
        var date = new Date();
        var string = date.getFullYear().toString() + date.getMonth().toString() + date.getDay().toString()
            + date.getHours().toString() + date.getMinutes().toString() +
            +date.getSeconds().toString() + date.getMilliseconds().toString();
        return string;
    };
    GalleryComponent = __decorate([
        core_1.Component({
            selector: "gallery-tab",
            templateUrl: "./pages/tabs/gallery/gallery.tab.html"
        }),
        __metadata("design:paramtypes", [core_1.ChangeDetectorRef, Data_1.Data])
    ], GalleryComponent);
    return GalleryComponent;
}());
exports.GalleryComponent = GalleryComponent;
//# sourceMappingURL=data:application/json;base64,