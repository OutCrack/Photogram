"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Photo_1 = require("../../../shared/Photo");
var router_1 = require("@angular/router");
var Data_1 = require("../../../shared/Data");
var http = require("http");
var layout = require("ui/layouts/grid-layout");
var firebase = require("nativescript-plugin-firebase");
var ProfileComponent = /** @class */ (function () {
    function ProfileComponent(router, data) {
        this.router = router;
        this.data = data;
        this.site = "http://188.166.127.207:5555/api.php/";
        console.log(JSON.stringify("OooooooooooOooooooooOOOOOOOOOOOOOOOOOOOO" + this.data.storage));
        this.profile = false;
        this.photos = false;
        this.selected = false;
    }
    ProfileComponent.prototype.showInfo = function () {
        if (this.profile) {
            this.profile = false;
        }
        else {
            this.profile = true;
        }
        this.firstName = this.data.storage["firstName"];
        this.lastName = this.data.storage["lastName"];
        this.id = this.data.storage["id"];
        this.email = this.data.storage["email"];
        console.log("Users name" + this.firstName + " " + this.lastName + " " + this.id);
    };
    ProfileComponent.prototype.showPhotos = function () {
        this.showInfo();
        this.profile = false;
        if (this.photos) {
            this.photos = false;
        }
        else {
            this.photos = true;
            if (this.myPhotos == null) {
                this.getPhotos();
            }
        }
    };
    ProfileComponent.prototype.getPhotos = function () {
        var _this = this;
        //get all photos uploaded by current user
        this.myPhotos = new Array();
        var query = this.site + "files?transform=1&filter=user_Id,eq," + this.id;
        http.getJSON(query)
            .then(function (r) {
            //testing
            console.log("Files length is " + r.files.length);
            for (var i = 0; i < r.files.length; i++) {
                _this.myPhotos.push(new Photo_1.Photo(r.files[i].file_Id, "users/" + r.files[i].file_URL, //need to adjust when photo is in event catalog
                _this.id, r.files[i].created_at));
            }
        }, function (e) {
            console.log(e);
        }).then(function () {
            //testing
            console.log("There are " + _this.myPhotos.length + " photos in my photos");
        });
    };
    ProfileComponent.prototype.selectPhoto = function (args) {
        this.selected = true;
        this.photos = false;
        this.profile = false;
        console.log("The id is " + args.view.id);
        console.log("The event name is " + args.eventName);
        var photo = this.myPhotos.find(function (i) { return i.id === parseInt(args.view.id); });
        this.photoUrl = photo.url;
        this.photoCreated = photo.created;
    };
    ProfileComponent.prototype.closePhoto = function () {
        this.selected = false;
        this.photos = true;
    };
    //logs out from both Google+ and Facebook accounts
    ProfileComponent.prototype.logout = function () {
        var router = this.router;
        this.data.storage = {};
        firebase.logout();
        router.navigate([""]);
    };
    ProfileComponent = __decorate([
        core_1.Component({
            selector: "profile-tab",
            templateUrl: "./pages/tabs/profile/profile.tab.html",
            styleUrls: ["./pages/tabs/profile/profile-tab.css"]
        }),
        __metadata("design:paramtypes", [router_1.Router, Data_1.Data])
    ], ProfileComponent);
    return ProfileComponent;
}());
exports.ProfileComponent = ProfileComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9maWxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEwQztBQUMxQywrQ0FBOEM7QUFDOUMsMENBQXlEO0FBR3pELDZDQUE0QztBQUU1QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDL0MsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFRekQ7SUFnQkksMEJBQW9CLE1BQWMsRUFBVSxJQUFVO1FBQWxDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFNO1FBTnRELFNBQUksR0FBVyxzQ0FBc0MsQ0FBQztRQU9sRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsMENBQTBDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzVGLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7SUFFRCxtQ0FBUSxHQUFSO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUN6QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoRCxJQUFJ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QUcsQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkQsSUFBSSxLQUFLLEdBQVUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUEvQixDQUErQixDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUN0QyxDQUFDO0lBRUQscUNBQVUsR0FBVjtRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFHRCxrREFBa0Q7SUFDcEQsaUNBQU0sR0FBTjtRQUNFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBbkdZLGdCQUFnQjtRQU41QixnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGFBQWE7WUFDdkIsV0FBVyxFQUFFLHVDQUF1QztZQUNwRCxTQUFTLEVBQUUsQ0FBQyxzQ0FBc0MsQ0FBQztTQUN0RCxDQUFDO3lDQWtCOEIsZUFBTSxFQUFnQixXQUFJO09BaEI3QyxnQkFBZ0IsQ0FxRzVCO0lBQUQsdUJBQUM7Q0FBQSxBQXJHRCxJQXFHQztBQXJHWSw0Q0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUGhvdG8gfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL1Bob3RvXCI7XG5pbXBvcnQgeyBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgVGFiQ29tcG9uZW50IH0gZnJvbSBcIi4uL3RhYi5jb21wb25lbnRcIjtcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL1VzZXJcIjtcbmltcG9ydCB7IERhdGEgfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL0RhdGFcIjtcbmltcG9ydCB7IEdlc3R1cmVFdmVudERhdGEgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9nZXN0dXJlcy9nZXN0dXJlc1wiO1xudmFyIGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbnZhciBsYXlvdXQgPSByZXF1aXJlKFwidWkvbGF5b3V0cy9ncmlkLWxheW91dFwiKTtcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcInByb2ZpbGUtdGFiXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9wYWdlcy90YWJzL3Byb2ZpbGUvcHJvZmlsZS50YWIuaHRtbFwiLFxuICAgIHN0eWxlVXJsczogW1wiLi9wYWdlcy90YWJzL3Byb2ZpbGUvcHJvZmlsZS10YWIuY3NzXCJdXG59KVxuXG5leHBvcnQgY2xhc3MgUHJvZmlsZUNvbXBvbmVudCB7XG5cbiAgICBwdWJsaWMgZmlyc3ROYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGxhc3ROYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGVtYWlsOiBzdHJpbmc7XG4gICAgcHVibGljIGlkOiBhbnk7XG4gICAgcHVibGljIHByb2ZpbGU6IGJvb2xlYW47XG4gICAgcHVibGljIHBob3RvczogYm9vbGVhbjtcbiAgICBwdWJsaWMgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIHNlbGVjdGVkUGhvdG86IHN0cmluZztcbiAgICBzaXRlOiBzdHJpbmcgPSBcImh0dHA6Ly8xODguMTY2LjEyNy4yMDc6NTU1NS9hcGkucGhwL1wiO1xuICAgIHB1YmxpYyBteVBob3RvczogQXJyYXk8UGhvdG8+O1xuICAgIHB1YmxpYyBwaG90b1VybDogc3RyaW5nO1xuICAgIHB1YmxpYyBwaG90b0NyZWF0ZWQ6IHN0cmluZztcbiAgICBcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgZGF0YTogRGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShcIk9vb29vb29vb29vT29vb29vb29vT09PT09PT09PT09PT09PT09PT09cIiArIHRoaXMuZGF0YS5zdG9yYWdlKSk7XG4gICAgICAgIHRoaXMucHJvZmlsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBob3RvcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2hvd0luZm8oKSB7XG4gICAgICAgIGlmICh0aGlzLnByb2ZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5maXJzdE5hbWUgPSB0aGlzLmRhdGEuc3RvcmFnZVtcImZpcnN0TmFtZVwiXTtcbiAgICAgICAgdGhpcy5sYXN0TmFtZSA9IHRoaXMuZGF0YS5zdG9yYWdlW1wibGFzdE5hbWVcIl07XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmRhdGEuc3RvcmFnZVtcImlkXCJdO1xuICAgICAgICB0aGlzLmVtYWlsID0gdGhpcy5kYXRhLnN0b3JhZ2VbXCJlbWFpbFwiXTtcbiAgICAgICAgY29uc29sZS5sb2coXCJVc2VycyBuYW1lXCIgKyB0aGlzLmZpcnN0TmFtZSArIFwiIFwiICsgdGhpcy5sYXN0TmFtZSArIFwiIFwiICsgdGhpcy5pZCk7XG4gICAgfVxuXG4gICAgc2hvd1Bob3RvcygpIHtcbiAgICAgICAgdGhpcy5zaG93SW5mbygpO1xuICAgICAgICB0aGlzLnByb2ZpbGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMucGhvdG9zKSB7XG4gICAgICAgICAgICB0aGlzLnBob3RvcyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5waG90b3MgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMubXlQaG90b3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGhvdG9zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBob3RvcygpIHtcbiAgICAgICAgLy9nZXQgYWxsIHBob3RvcyB1cGxvYWRlZCBieSBjdXJyZW50IHVzZXJcbiAgICAgICAgdGhpcy5teVBob3RvcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB2YXIgcXVlcnk6IHN0cmluZyA9IHRoaXMuc2l0ZSArIFwiZmlsZXM/dHJhbnNmb3JtPTEmZmlsdGVyPXVzZXJfSWQsZXEsXCIgKyB0aGlzLmlkO1xuICAgICAgICBodHRwLmdldEpTT04ocXVlcnkpXG4gICAgICAgIC50aGVuKChyKSA9PiB7XG4gICAgICAgICAgICAvL3Rlc3RpbmdcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRmlsZXMgbGVuZ3RoIGlzIFwiICsgci5maWxlcy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByLmZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5teVBob3Rvcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBuZXcgUGhvdG8oXG4gICAgICAgICAgICAgICAgICAgICAgICByLmZpbGVzW2ldLmZpbGVfSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJzL1wiICsgci5maWxlc1tpXS5maWxlX1VSTCwgLy9uZWVkIHRvIGFkanVzdCB3aGVuIHBob3RvIGlzIGluIGV2ZW50IGNhdGFsb2dcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByLmZpbGVzW2ldLmNyZWF0ZWRfYXRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC8vdGVzdGluZ1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaGVyZSBhcmUgXCIgKyB0aGlzLm15UGhvdG9zLmxlbmd0aCArIFwiIHBob3RvcyBpbiBteSBwaG90b3NcIik7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc2VsZWN0UGhvdG8oYXJnczogR2VzdHVyZUV2ZW50RGF0YSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5waG90b3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9maWxlID0gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGhlIGlkIGlzIFwiICsgYXJncy52aWV3LmlkKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJUaGUgZXZlbnQgbmFtZSBpcyBcIiArIGFyZ3MuZXZlbnROYW1lKTtcbiAgICAgICAgdmFyIHBob3RvOiBQaG90byA9IHRoaXMubXlQaG90b3MuZmluZChpID0+IGkuaWQgPT09IHBhcnNlSW50KGFyZ3Mudmlldy5pZCkpO1xuICAgICAgICB0aGlzLnBob3RvVXJsID0gcGhvdG8udXJsO1xuICAgICAgICB0aGlzLnBob3RvQ3JlYXRlZCA9IHBob3RvLmNyZWF0ZWQ7XG4gICAgfVxuXG4gICAgY2xvc2VQaG90bygpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBob3RvcyA9IHRydWU7XG4gICAgfVxuXG5cbiAgICAvL2xvZ3Mgb3V0IGZyb20gYm90aCBHb29nbGUrIGFuZCBGYWNlYm9vayBhY2NvdW50c1xuICBsb2dvdXQoKSB7XG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHRoaXMuZGF0YS5zdG9yYWdlID0ge307XG4gICAgZmlyZWJhc2UubG9nb3V0KCk7XG4gICAgcm91dGVyLm5hdmlnYXRlKFtcIlwiXSk7XG59XG5cbn0iXX0=