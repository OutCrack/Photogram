"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Photo_1 = require("../../../shared/Photo");
var router_1 = require("@angular/router");
var Data_1 = require("../../../shared/Data");
var http = require("http");
var layout = require("ui/layouts/grid-layout");
var firebase = require("nativescript-plugin-firebase");
var ProfileComponent = /** @class */ (function () {
    function ProfileComponent(router, data) {
        this.router = router;
        this.data = data;
        this.site = "http://188.166.127.207:5555/api.php/";
        console.log(JSON.stringify("OooooooooooOooooooooOOOOOOOOOOOOOOOOOOOO" + this.data.storage));
        this.profile = false;
        this.photos = false;
        this.selected = false;
    }
    ProfileComponent.prototype.showInfo = function () {
        if (this.profile) {
            this.profile = false;
        }
        else {
            this.profile = true;
        }
        this.firstName = this.data.storage["firstName"];
        this.lastName = this.data.storage["lastName"];
        this.id = this.data.storage["id"];
        this.email = this.data.storage["email"];
        console.log("Users name" + this.firstName + " " + this.lastName + " " + this.id);
    };
    ProfileComponent.prototype.showPhotos = function () {
        this.showInfo();
        this.profile = false;
        if (this.photos) {
            this.photos = false;
        }
        else {
            this.photos = true;
            if (this.myPhotos == null) {
                this.getPhotos();
            }
        }
    };
    ProfileComponent.prototype.getPhotos = function () {
        var _this = this;
        this.myPhotos = new Array();
        var query = this.site + "files?transform=1&filter=user_Id,eq," + this.id + "&order=created_at,desc";
        http.getJSON(query)
            .then(function (r) {
            //testing
            console.log("Files length is " + r.files.length);
            for (var i = 0; i < r.files.length; i++) {
                _this.myPhotos.push(new Photo_1.Photo(r.files[i].file_Id, "users/" + _this.id + "/" + r.files[i].file_URL, //need to adjust when photo is in event catalog
                _this.id, r.files[i].created_at));
            }
        }, function (e) {
            console.log(e);
        }).then(function () {
            //testing
            console.log("There are " + _this.myPhotos.length + " photos in my photos");
        });
    };
    ProfileComponent.prototype.selectPhoto = function (args) {
        this.selected = true;
        this.photos = false;
        this.profile = false;
        console.log("The id is " + args.view.id);
        console.log("The event name is " + args.eventName);
        var photo = this.myPhotos.find(function (i) { return i.id === parseInt(args.view.id); });
        this.photoUrl = photo.url;
        this.photoCreated = photo.created;
    };
    ProfileComponent.prototype.closePhoto = function () {
        this.selected = false;
        this.photos = true;
    };
    //logs out from both Google+ and Facebook accounts
    ProfileComponent.prototype.logout = function () {
        var router = this.router;
        this.data.storage = {};
        firebase.logout();
        router.navigate([""]);
    };
    ProfileComponent = __decorate([
        core_1.Component({
            selector: "profile-tab",
            templateUrl: "./pages/tabs/profile/profile.tab.html",
            styleUrls: ["./pages/tabs/profile/profile-tab.css"]
        }),
        __metadata("design:paramtypes", [router_1.Router, Data_1.Data])
    ], ProfileComponent);
    return ProfileComponent;
}());
exports.ProfileComponent = ProfileComponent;
//# sourceMappingURL=data:application/json;base64,